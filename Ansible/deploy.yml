- name: Create app on cloud
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
    ansible_host_key_checking: False
    ansible_python_interpreter: /usr/bin/python3


  tasks:
    - name: create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ vpc_name }}"
      register: vpc



    - name: Add VPC definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/change.env
        regexp: 'vpc_id:'
        line: 'vpc_id:{{vpc.vpc.id}}'
        state: present
        create: true


    - name: associate subnet to the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ item.env_network }}"
        map_public: "{{item.external_ip}}"
        az: "{{ item.az }}"
        resource_tags:
          Name: "{{ item.subnet_name}}"
        wait: yes
      with_items:
        - {subnet_name: "{{vpc_name}}_public", env_network: "{{subnet_public}}", external_ip: yes, az: "{{subnet1}}"}
      register: subnet

    - name: Add subnet definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/change.env
        regexp: 'subnet_id:'
        line: 'subnet_id:{{subnet.results[0].subnet.id}}'
        state: present
        create : true


    - name: create IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw


    - name: Add IGW definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/change.env
        regexp: 'igw_id:'
        line: 'igw_id:{{igw.gateway_id}}'
        state: present
        create : true


    - name: Route table for public Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        subnets:
          - "{{ subnet.results[0].subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
            Name: "{{ vpc_name }}_public_rt"
      register: route_table


    - name: Create security group
      ec2_group:
        name: "{{ vpc_name }} VPC SG"
        description: "{{ vpc_name }} VPC SG"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region}}"
        state: present
        rules:
          - proto: tcp
            ports:
            - 80
            - 22
            cidr_ip: 0.0.0.0/0
      register: sg


    - name: Create server
      amazon.aws.ec2_instance:
        image_id: "{{ aws_ubuntu_ami }}"
        wait: yes
        instance_type: "{{ server_type }}"
        region: "{{ aws_region }}"
        key_name: "{{ keypair }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        tags:
          Name: "{{ server_name }}"
          Environment: "{{ env }}"
        exact_count: 1
        wait_timeout: 300
        security_group: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.results[0].subnet.id}}"
        network:
          assign_public_ip: yes
        state: running
      register: server_ec2



    - name: get ip of instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: [ "running"]
      register: ec2_data


    - debug: var=ec2_data.instances[0].public_ip_address



    - name: Add server public IP to application host group
      add_host:
        name: "{{ ec2_data.instances[0].public_ip_address }}"
        groups: app
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /home/nofar/.ssh/id_rsa


    
    - name: Add public IP definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/change.env
        regexp: 'server_id:'
        line: 'server_id:{{ec2_data.instances[0].instance_id}}'
        state: present
        create : true



    - name: Wait for SSH to start using external IP
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    - name: Pause for WSL user acces after boot
      ansible.builtin.pause:
        seconds: 30




- name: SetUp web server
  hosts: app
  user: ubuntu
  become: yes
  gather_facts: False
  vars_files:
    - group_vars/docker.env
  tasks:

    - name: add GPG key_name
      ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes


    - name: copy file with owner permissions
      copy:
        src: /home/nofar/.ssh/id_rsa
        dest: /home/ubuntu/.ssh/id_rsa
        mode: '0600'
        owner: ubuntu
        group: ubuntu


    - name: Clone m app repo
      git:
        repo: git@github.com:NofarMahani1/DevOpsFinal.git
        dest: /opt/app
        version: main
        key_file: /home/ubuntu/.ssh/id_rsa
        accept_hostkey: yes
        force: yes


    - name : build docker image and push to DockerHub
      shell: "{{item}}"
      args:
        chdir: /opt/app
      with_items:
        - docker login -u {{docker_user}} -p {{docker_token}}
        - docker build . --tag {{docker_user}}/change:latest
        - docker push {{docker_user}}/change:latest

    
    - name: start docker app
      shell: docker compose up -d
      args:
        chdir: /opt/app


    - name: get public IP from server
      shell: curl ident.me
      register: ip_address

    - debug:
        msg: 
          - "your app is ready to go at http://{{ip_address.stdout}}"